[config-arcus-integration]
zookeeper=127.0.0.1:2181

service_code=test

#single_server=cachehost:11212

client=8

rate=0
request=0
time=6000

keyset_size=10000000
key_prefix=simple_decinc:
valueset_min_size=10
valueset_max_size=10

client_profile=torture_arcus_integration

pool=1
pool_size=8
pool_use_random=false


[config-btree-ins-bulkdel]
#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=1000000
key_prefix=btreebulkdel:
valueset_min_size=2048
valueset_max_size=2048

client_profile=torture_btree_ins_bulkdel
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-btree-ins-getwithdelete]
#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=1000000
key_prefix=btreegetwithdelete:
valueset_min_size=2048
valueset_max_size=2048

client_profile=torture_btree_ins_getwithdelete
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-btree-ins-maxelement]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=2
key_prefix=btreemaxelem:
valueset_min_size=4000
valueset_max_size=4000

client_profile=torture_btree_ins_maxelement
client_exptime=-1

pool=1
pool_size=1
pool_use_random=false


[config-cas]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=300

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
key_prefix=simple_cas:
valueset_min_size=10
valueset_max_size=1000

client_profile=torture_cas

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=300

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false

[config-create-keys]

#zookeeper=127.0.0.1:2181
service_code=test
single_server=cachehost:20120

client=1

rate=0
request=2000
time=0

# Keys
keyset_profile=numeric
keyset_size=1000
keyset_length=50
#key_prefix=

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=30

# Clients
client_profile=create_keys
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-demo-graceful-failover]

#
zookeeper=127.0.0.1:2181

#
service_code=graceful-failover

client=40

#rate=100

# inter-request gap (msec)
irg=8

#
request=0

#
time=0

keyset_size=1000000
key_prefix=simple:
valueset_min_size=100
valueset_max_size=100

client_profile=simple_getset

pool=1
pool_size=4
pool_use_random=false


[config-demo-high-speed]

#
zookeeper=127.0.0.1:2181

#
service_code=high-speed

client=80

#rate=100

# inter-request gap (msec)
#irg=8

#
request=0

#
time=0

keyset_size=1000000
key_prefix=simple:
valueset_min_size=100
valueset_max_size=100

client_profile=simple_getset

pool=1
pool_size=80
pool_use_random=false

[config-demo-kill-failover]

#
zookeeper=127.0.0.1:2181

#
service_code=kill-failover

client=40

#rate=100

# inter-request gap (msec)
irg=8

#
request=0

#
time=0

keyset_size=1000000
key_prefix=simple:
valueset_min_size=100
valueset_max_size=100

client_profile=simple_getset

pool=1
pool_size=4
pool_use_random=false

[config-gc]

zookeeper=127.0.0.1:2181
service_code=test
#single_server=cachehost:20120

client=12

rate=0
request=0
time=0

# Keys
keyset_size=10000

# Values
valueset_profile=default
#valueset_min_size=10000
#valueset_max_size=14000
#valueset_min_size=6000
#valueset_max_size=6000
valueset_min_size=12000
valueset_max_size=12000

# Clients
client_profile=create_keys

pool=1
pool_size=30
pool_use_random=false

[config-gc-btree-elem]

zookeeper=127.0.0.1:2181
service_code=test
#single_server=cachehost:20120

client=12

rate=0
request=0
time=0

# Keys
keyset_size=1000

# Values
valueset_profile=default
valueset_min_size=4000
valueset_max_size=4000

# Clients
client_profile=btree_elem_upsert

pool=1
pool_size=30
pool_use_random=false

[config-get-keys]

#zookeeper=127.0.0.1:2181
service_code=test
single_server=cachehost:20120

client=80

rate=0
request=0
time=0

# Keys
keyset_profile=numeric
keyset_size=1000
keyset_length=50
#key_prefix=

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=30

# Clients
client_profile=get

pool=1
pool_size=80
pool_use_random=false

[config-large-items]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=3

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
key_prefix=large:
valueset_min_size=10240
# hash_item+key+value+pads <= max 1MB
valueset_max_size=1048480

#valueset_min_size=10240
#valueset_max_size=1048576

client_profile=simple_set

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=3

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false

[config-latency]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=600

keyset_size=100000
valueset_min_size=10
valueset_max_size=10

client_profile=simple_set

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-list-ins-bulkdel]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=1000000
key_prefix=listbulkdel:
valueset_min_size=2048
valueset_max_size=2048

client_profile=torture_list_ins_bulkdel
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-list-ins-getwithdelete]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=1000000
key_prefix=listgetwithdelete:
valueset_min_size=2048
valueset_max_size=2048

client_profile=torture_list_ins_getwithdelete
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-list-ins-maxelement]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=2
key_prefix=listmaxelem:
valueset_min_size=4000
valueset_max_size=4000

client_profile=torture_list_ins_maxelement
client_exptime=-1

pool=1
pool_size=1
pool_use_random=false

[config-max-bop]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
key_prefix=btree:
valueset_min_size=10
valueset_max_size=10

client_profile=torture_btree

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-max-lop]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
valueset_min_size=10
valueset_max_size=10

client_profile=torture_list

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false

[config-max-rate]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=30

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
key_prefix=simple:
valueset_min_size=10
valueset_max_size=10

client_profile=simple_set

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=30

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-max-sop]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
valueset_min_size=10
valueset_max_size=10

client_profile=torture_set

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-mget-500]

zookeeper=127.0.0.1:2181
service_code=test
#single_server=cachehost:11212

client=30

rate=0
request=100000
time=0

# Keys
keyset_profile=numeric
keyset_size=1000
keyset_length=50
#key_prefix=

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=30

# Clients
client_profile=mget
client_mget_keys=500

pool=1
pool_size=30
pool_use_random=false

[config-mget-create-keys]

zookeeper=127.0.0.1:2181
service_code=test
#single_server=cachehost:11212

client=1

rate=0
request=2000
time=0

# Keys
keyset_profile=numeric
keyset_size=1000
keyset_length=50
#key_prefix=

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=30

# Clients
client_profile=create_keys
client_exptime=2000

pool=1
pool_size=1
pool_use_random=false


[config-set-ins-getwithdelete]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=1000000
key_prefix=setgetwithdelete:
valueset_min_size=2048
valueset_max_size=2048

client_profile=torture_set_ins_getwithdelete
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-simple-decinc]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=6000

keyset_size=10000000
key_prefix=simple_decinc:
valueset_min_size=10
valueset_max_size=10

client_profile=torture_simple_decinc

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-simple-getset]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=10

#
#rate=100

#
request=0

#
time=600

keyset_size=1000000
key_prefix=simple:
valueset_min_size=100
valueset_max_size=100

client_profile=simple_getset

pool=1
pool_size=10
pool_use_random=false


[config-simple-set.1mb]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:21111

# How many acp clients (threads) to use?
client=1

#
rate=0

#
request=0

#
time=240

keyset_size=500
key_prefix=simplelarge:
valueset_min_size=1048000
valueset_max_size=1048000

client_profile=simple_set
client_exptime=0

pool=1
pool_size=1
pool_use_random=false


[config-simple-sticky]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=20

#
rate=0

#
request=0

#
time=600

keyset_size=10000000
key_prefix=simple_sticky:
valueset_min_size=10
valueset_max_size=1000

client_profile=torture_simple_sticky

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=20

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false


[config-standard-mix]

zookeeper=127.0.0.1:2181
service_code=test
#single_server=cachehost:20120

client=20

rate=0
request=0
time=0

# Keys
keyset_size=1000000

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=2000

# Clients
client_profile=standard_mix

pool=1
pool_size=20
pool_use_random=false


[config-standard-mix-noexp]
# ZooKeeper and ServiceCode
zookeeper=127.0.0.1:2181
#single_server=127.0.0.1:20120
service_code=test

# the number of client threads.
client=20

# Control requests
# request rate: requests / second
rate=0
# total requests  
request=50000
# run time (unit: seconds) 
time=0

# Keys
key_prefix=standard_mix:
keyset_size=1000000

# Values
valueset_profile=default
valueset_min_size=30
valueset_max_size=2000

# Clients
client_profile=standard_mix
# expire time
client_exptime=0

pool=1
pool_size=20
pool_use_random=false


[config-test]

#
zookeeper=127.0.0.1:2181

#
service_code=test

# How many acp clients (threads) to use?
client=20

#
rate=0

#
request=0

#
time=600

keyset_size=1000000
valueset_min_size=10
valueset_max_size=2000

#key_prefix=btree:
#client_profile=torture_btree_replace

#key_prefix=btree:
#client_profile=torture_btree_ins_del

#key_prefix=btree:
#client_profile=torture_btree_decinc

#key_prefix=btree:
#client_profile=torture_btree_exptime

#key_prefix=btree:
#client_profile=torture_btree_bytebkey

#key_prefix=btree:
#client_profile=torture_btree_maxbkeyrange

key_prefix=btree:
client_profile=torture_btree_bytemaxbkeyrange

#key_prefix=set:
#client_profile=torture_set_ins_del

#key_prefix=list:
#client_profile=torture_list_ins_del

pool=1
pool_size=20
pool_use_random=false


[config-tiny-btree]

#
zookeeper=127.0.0.1:2181

#
service_code=test

#single_server=cachehost:11212

# How many acp clients (threads) to use?
client=10

#
rate=0

#
request=0

#
time=600

keyset_size=10000000
valueset_min_size=10
valueset_max_size=10

client_profile=tiny_btree

# Java client settings

# How many ArcusClient pools to use?
# Each pool has its own CacheManager that connects to ZK.
# All ArcusClient's in the pool use the same hash ring.
pool=1

# Each pool creates this many ArcusClient's.
# acp clients are evenly spread across ArcusClient's.
pool_size=10

# ArcusClientPool.getClient() returns a random client in the pool.
# Set pool_use_random=true to use that method to select a random client for
# each request.
# Set pool_use_random=false to use getAllClients() and statically assign one
# acp client to one ArcusClient in a round-robin fashion.
pool_use_random=false

